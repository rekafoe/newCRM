import { TelegramUserService } from './telegramUserService';
import { MaterialService } from './materialService';
import { TelegramService } from './telegramService';
import { PDFReportService } from './pdfReportService';
import { PhotoOrderService } from './photoOrderService';
import { ImageProcessingService } from './imageProcessingService';
import { getDb } from '../db';

export interface BotCommand {
  command: string;
  description: string;
  roles: string[]; // –ö–∞–∫–∏–µ —Ä–æ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
  handler: (chatId: string, userId: string, args?: string[]) => Promise<string>;
}

export class TelegramBotCommands {
  private static commands: BotCommand[] = [
    {
      command: '/start',
      description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
      roles: ['client', 'manager', 'admin'],
      handler: TelegramBotCommands.handleStart
    },
    {
      command: '/help',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã',
      roles: ['client', 'manager', 'admin'],
      handler: TelegramBotCommands.handleHelp
    },
    {
      command: '/stock',
      description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤)',
      roles: ['manager', 'admin'],
      handler: TelegramBotCommands.handleStockCheck
    },
    {
      command: '/stock_pdf',
      description: '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –≤ PDF (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)',
      roles: ['admin'],
      handler: TelegramBotCommands.handleStockPDF
    },
    {
      command: '/stock_report',
      description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–µ–∫—Å—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)',
      roles: ['admin'],
      handler: TelegramBotCommands.handleStockReport
    },
    {
      command: '/profile',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ',
      roles: ['client', 'manager', 'admin'],
      handler: TelegramBotCommands.handleProfile
    },
    {
      command: '/order_photo',
      description: '–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
      roles: ['client', 'manager', 'admin'],
      handler: TelegramBotCommands.handleOrderPhoto
    },
    {
      command: '/my_orders',
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã —Ñ–æ—Ç–æ',
      roles: ['client', 'manager', 'admin'],
      handler: TelegramBotCommands.handleMyOrders
    }
  ];

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  static async handleStart(chatId: string, userId: string): Promise<string> {
    try {
      const user = await TelegramUserService.getUserByChatId(chatId);
      
      if (!user) {
        return `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É.\n\n` +
               `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
               `/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n` +
               `/profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n\n` +
               `üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      }

      const roleEmoji = user.role === 'admin' ? 'üëë' : 
                       user.role === 'manager' ? 'üë®‚Äçüíº' : 'üë§';
      
      return `üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n` +
             `${roleEmoji} –í–∞—à–∞ —Ä–æ–ª—å: ${user.role}\n` +
             `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
             `/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n` +
             `/profile - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n\n` +
             `üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help`;
    } catch (error) {
      console.error('‚ùå Error in handleStart:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
   */
  static async handleHelp(chatId: string, userId: string): Promise<string> {
    try {
      const user = await TelegramUserService.getUserByChatId(chatId);
      
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      }

      const availableCommands = this.commands.filter(cmd => 
        cmd.roles.includes(user.role)
      );

      let helpText = `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–æ–ª–∏ "${user.role}":\n\n`;
      
      availableCommands.forEach(cmd => {
        helpText += `${cmd.command} - ${cmd.description}\n`;
      });

      helpText += `\nüí° –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
      
      return helpText;
    } catch (error) {
      console.error('‚ùå Error in handleHelp:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stock
   */
  static async handleStockCheck(chatId: string, userId: string): Promise<string> {
    try {
      const user = await TelegramUserService.getUserByChatId(chatId);
      
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      }

      if (!['manager', 'admin'].includes(user.role)) {
        return '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.';
      }

      console.log(`üìä User ${user.first_name} (${user.role}) requested stock check at ${new Date().toLocaleString()}`);

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
      const materials = await MaterialService.getLowStockMaterials();
      const allMaterials = await MaterialService.getAllMaterials();

      if (materials.length === 0) {
        return `‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–æ—Ä–º–µ!\n\n` +
               `üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${allMaterials.length}\n` +
               `‚è∞ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
      }

      let message = `üö® –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏:\n\n`;
      
      materials.forEach((material: any, index: number) => {
        const status = material.quantity <= 0 ? 'üî¥ –ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò' : 
                      material.quantity <= material.min_quantity ? 'üü° –ù–ò–ó–ö–ò–ô –û–°–¢–ê–¢–û–ö' : 'üü¢ –í –ù–û–†–ú–ï';
        
        message += `${index + 1}. ${material.name}\n`;
        message += `   üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${material.quantity} ${material.unit}\n`;
        message += `   ‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º: ${material.min_quantity} ${material.unit}\n`;
        message += `   ${status}\n\n`;
      });

      message += `üìä –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${materials.length}\n`;
      message += `üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${allMaterials.length}\n`;
      message += `‚è∞ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

      return message;
    } catch (error) {
      console.error('‚ùå Error in handleStockCheck:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stock_pdf
   */
  static async handleStockPDF(chatId: string, userId: string): Promise<string> {
    try {
      const user = await TelegramUserService.getUserByChatId(chatId);
      
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      }

      if (user.role !== 'admin') {
        return '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.';
      }

      console.log(`üìÑ Admin ${user.first_name} requested stock PDF at ${new Date().toLocaleString()}`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç
      const reportBuffer = await PDFReportService.generateStockReport(user.first_name || 'Admin');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `stock-report-${timestamp}.pdf`;
      const filePath = await PDFReportService.saveReportToFile(reportBuffer, filename);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const fileSent = await TelegramService.sendDocumentToUser(chatId, filePath, `üìä –û—Ç—á–µ—Ç –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n‚è∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}\nüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${user.first_name}`);
      
      if (fileSent) {
        return `‚úÖ PDF –æ—Ç—á–µ—Ç –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n` +
               `‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toLocaleString('ru-RU')}\n` +
               `üë§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: ${user.first_name} (${user.role})\n` +
               `üìÑ –§–∞–π–ª: ${filename}`;
      } else {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.log('üìÑ File sending failed, sending text report instead...');
        const textReport = await this.handleStockReport(chatId, userId);
        return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF —Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n\n${textReport}`;
      }
    } catch (error) {
      console.error('‚ùå Error in handleStockPDF:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stock_report
   */
  static async handleStockReport(chatId: string, userId: string): Promise<string> {
    try {
      const user = await TelegramUserService.getUserByChatId(chatId);
      
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      }

      if (user.role !== 'admin') {
        return '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.';
      }

      console.log(`üìä Admin ${user.first_name} requested detailed stock report at ${new Date().toLocaleString()}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      const allMaterials = await MaterialService.getAllMaterials();
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      const sortedMaterials = allMaterials.sort((a: any, b: any) => {
        const getStatus = (material: any) => {
          if (material.quantity <= 0) return 0; // out_of_stock
          if (material.quantity <= material.min_quantity) return 1; // critical
          if (material.quantity <= material.min_quantity * 1.5) return 2; // low
          return 3; // ok
        };
        return getStatus(a) - getStatus(b);
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = {
        total: allMaterials.length,
        out_of_stock: allMaterials.filter((m: any) => m.quantity <= 0).length,
        critical: allMaterials.filter((m: any) => m.quantity > 0 && m.quantity <= m.min_quantity).length,
        low: allMaterials.filter((m: any) => m.quantity > m.min_quantity && m.quantity <= m.min_quantity * 1.5).length,
        ok: allMaterials.filter((m: any) => m.quantity > m.min_quantity * 1.5).length
      };

      let report = `üìä *–ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ –û–ë –û–°–¢–ê–¢–ö–ê–• –ú–ê–¢–ï–†–ò–ê–õ–û–í*\n\n`;
      report += `‚è∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n`;
      report += `üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${user.first_name}\n\n`;
      
      report += `üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n`;
      report += `üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: ${stats.out_of_stock}\n`;
      report += `üü° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: ${stats.critical}\n`;
      report += `üü† –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${stats.low}\n`;
      report += `üü¢ –í –Ω–æ—Ä–º–µ: ${stats.ok}\n`;
      report += `üì¶ –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${stats.total}\n\n`;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      const problematicMaterials = sortedMaterials.filter((m: any) => 
        m.quantity <= m.min_quantity * 1.5
      );

      if (problematicMaterials.length > 0) {
        report += `üö® *–ú–ê–¢–ï–†–ò–ê–õ–´ –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø:*\n\n`;
        
        problematicMaterials.forEach((material: any, index: number) => {
          const status = material.quantity <= 0 ? 'üî¥ –ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò' : 
                        material.quantity <= material.min_quantity ? 'üü° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' : 'üü† –ù–ò–ó–ö–ò–ô';
          
          report += `${index + 1}. *${material.name}*\n`;
          report += `   üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${material.quantity} ${material.unit}\n`;
          report += `   ‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º: ${material.min_quantity} ${material.unit}\n`;
          report += `   ${status}\n`;
          if (material.supplier_name) {
            report += `   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${material.supplier_name}\n`;
          }
          report += `\n`;
        });
      } else {
        report += `‚úÖ *–í–°–ï –ú–ê–¢–ï–†–ò–ê–õ–´ –í –ù–û–†–ú–ï!*\n\n`;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–æ—Ä–º–µ (–ø–µ—Ä–≤—ã–µ 10)
      const okMaterials = sortedMaterials.filter((m: any) => 
        m.quantity > m.min_quantity * 1.5
      ).slice(0, 10);

      if (okMaterials.length > 0) {
        report += `üü¢ *–ú–ê–¢–ï–†–ò–ê–õ–´ –í –ù–û–†–ú–ï* (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10):\n\n`;
        
        okMaterials.forEach((material: any, index: number) => {
          report += `${index + 1}. ${material.name} - ${material.quantity} ${material.unit}\n`;
        });
        
        if (stats.ok > 10) {
          report += `\n... –∏ –µ—â–µ ${stats.ok - 10} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –Ω–æ—Ä–º–µ`;
        }
      }

      report += `\n\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
      if (stats.out_of_stock > 0) {
        report += `‚Ä¢ –°—Ä–æ—á–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å ${stats.out_of_stock} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n`;
      }
      if (stats.critical > 0) {
        report += `‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç—å ${stats.critical} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —É—Ä–æ–≤–Ω–µ–º\n`;
      }
      if (stats.low > 0) {
        report += `‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ ${stats.low} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º\n`;
      }

      return report;
    } catch (error) {
      console.error('‚ùå Error in handleStockReport:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
   */
  static async handleProfile(chatId: string, userId: string): Promise<string> {
    try {
      const user = await TelegramUserService.getUserByChatId(chatId);
      
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      }

      const roleEmoji = user.role === 'admin' ? 'üëë' : 
                       user.role === 'manager' ? 'üë®‚Äçüíº' : 'üë§';
      
      const notificationsStatus = user.notifications_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã';
      
      let preferences = '';
      if (user.notification_preferences) {
        preferences = `\nüìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n`;
        preferences += `‚Ä¢ –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏: ${user.notification_preferences.low_stock ? '‚úÖ' : '‚ùå'}\n`;
        preferences += `‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: ${user.notification_preferences.new_orders ? '‚úÖ' : '‚ùå'}\n`;
        preferences += `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ: ${user.notification_preferences.system_alerts ? '‚úÖ' : '‚ùå'}`;
      }

      return `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:\n\n` +
             `üë§ –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
             `üìù Username: @${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
             `${roleEmoji} –†–æ–ª—å: ${user.role}\n` +
             `üì± Chat ID: ${user.chat_id}\n` +
             `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationsStatus}\n` +
             `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleString('ru-RU')}` +
             preferences;
    } catch (error) {
      console.error('‚ùå Error in handleProfile:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static async handleMessage(chatId: string, userId: string, text: string): Promise<string | null> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
      if (!text.startsWith('/')) {
        return null; // –ù–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      }

      const [command, ...args] = text.split(' ');
      const cmd = this.commands.find(c => c.command === command);

      if (!cmd) {
        return `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}\n\n` +
               `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const user = await TelegramUserService.getUserByChatId(chatId);
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      }

      if (!cmd.roles.includes(user.role)) {
        return `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${command}.\n\n` +
               `–í–∞—à–∞ —Ä–æ–ª—å: ${user.role}\n` +
               `–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏: ${cmd.roles.join(', ')}`;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
      return await cmd.handler(chatId, userId, args);
    } catch (error) {
      console.error('‚ùå Error in handleMessage:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /order_photo
   */
  static async handleOrderPhoto(chatId: string, userId: string): Promise<string> {
    try {
      const user = await TelegramUserService.getUserByChatId(chatId);
      
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      }

      const message = `üì∏ *–ó–ê–ö–ê–ó –ü–ï–ß–ê–¢–ò –§–û–¢–û–ì–†–ê–§–ò–ô*\n\n` +
                     `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                     `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:*\n` +
                     `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –Ω–∏–∂–µ ‚¨áÔ∏è`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      await TelegramService.sendMessageWithKeyboard(chatId, message, TelegramBotCommands.getSizeSelectionKeyboard());

      return 'üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞';
    } catch (error) {
      console.error('‚ùå Error in handleOrderPhoto:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
   */
  static getSizeSelectionKeyboard() {
    const sizes = ImageProcessingService.getAvailableSizes();
    const prices = PhotoOrderService.getAllPrices();

    const keyboard = {
      inline_keyboard: sizes.map(size => {
        const price = prices[size.name] || 0;
        const priceRub = (price / 100).toFixed(0);
        return [{
          text: `üìè ${size.name} - ${priceRub} —Ä—É–±.`,
          callback_data: `size_${size.name}`
        }];
      })
    };

    return keyboard;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  static getProcessingModeKeyboard(sizeName: string) {
    return {
      inline_keyboard: [
        [{
          text: '‚úÇÔ∏è –ö—Ä–æ–ø (–æ–±—Ä–µ–∑–∞—Ç—å –ø–æ–¥ —Ä–∞–∑–º–µ—Ä)',
          callback_data: `mode_crop_${sizeName}`
        }],
        [{
          text: 'üìê –í–ø–∏—Å–∞—Ç—å (—Å –±–µ–ª—ã–º–∏ –ø–æ–ª—è–º–∏)',
          callback_data: `mode_fit_${sizeName}`
        }],
        [{
          text: 'ü§ñ –£–º–Ω—ã–π –∫—Ä–æ–ø (–ò–ò)',
          callback_data: `mode_smart_${sizeName}`
        }],
        [{
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–º–µ—Ä–∞–º',
          callback_data: 'back_to_sizes'
        }]
      ]
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
   */
  static getQuantityKeyboard(sizeName: string, mode: string) {
    return {
      inline_keyboard: [
        [{
          text: '1 –∫–æ–ø–∏—è',
          callback_data: `qty_1_${mode}_${sizeName}`
        }, {
          text: '2 –∫–æ–ø–∏–∏',
          callback_data: `qty_2_${mode}_${sizeName}`
        }, {
          text: '3 –∫–æ–ø–∏–∏',
          callback_data: `qty_3_${mode}_${sizeName}`
        }],
        [{
          text: '5 –∫–æ–ø–∏–π',
          callback_data: `qty_5_${mode}_${sizeName}`
        }, {
          text: '10 –∫–æ–ø–∏–π',
          callback_data: `qty_10_${mode}_${sizeName}`
        }, {
          text: '20 –∫–æ–ø–∏–π',
          callback_data: `qty_20_${mode}_${sizeName}`
        }],
        [{
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∂–∏–º—É',
          callback_data: `back_to_mode_${sizeName}`
        }]
      ]
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
   */
  static getConfirmationKeyboard(orderData: any) {
    const totalPriceRub = (orderData.totalPrice / 100).toFixed(0);
    
    return {
      inline_keyboard: [
        [{
          text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
          callback_data: `confirm_${orderData.id}`
        }],
        [{
          text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
          callback_data: `cancel_${orderData.id}`
        }],
        [{
          text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
          callback_data: `edit_${orderData.id}`
        }]
      ]
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_orders
   */
  static async handleMyOrders(chatId: string, userId: string): Promise<string> {
    try {
      const user = await TelegramUserService.getUserByChatId(chatId);
      
      if (!user) {
        return '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      }

      const orders = await PhotoOrderService.getOrdersByChatId(chatId);

      if (orders.length === 0) {
        return `üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n\n` +
               `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /order_photo –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.`;
      }

      let message = `üìã *–í–ê–®–ò –ó–ê–ö–ê–ó–´ –§–û–¢–û–ì–†–ê–§–ò–ô*\n\n`;
      message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}\n\n`;

      orders.forEach((order, index) => {
        const statusEmoji = {
          'pending': '‚è≥',
          'processing': 'üîÑ',
          'ready_for_approval': 'üëÄ',
          'approved': '‚úÖ',
          'rejected': '‚ùå',
          'completed': 'üéâ'
        }[order.status] || '‚ùì';

        const statusText = {
          'pending': '–û–∂–∏–¥–∞–µ—Ç',
          'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
          'ready_for_approval': '–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é',
          'approved': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
          'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
          'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω'
        }[order.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        const totalPriceRub = (order.totalPrice / 100).toFixed(0);

        message += `${index + 1}. ${statusEmoji} *–ó–∞–∫–∞–∑ #${order.id}*\n`;
        message += `   üìè –†–∞–∑–º–µ—Ä: ${order.selectedSize.name}\n`;
        message += `   üì∏ –§–æ—Ç–æ: ${order.originalPhotos.length} —à—Ç.\n`;
        message += `   üì¶ –ö–æ–ø–∏–π: ${order.quantity}\n`;
        message += `   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPriceRub} —Ä—É–±.\n`;
        message += `   üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n`;
        message += `   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(order.createdAt).toLocaleString('ru-RU')}\n\n`;
      });

      message += `üí° *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò:*\n`;
      message += `‚Ä¢ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #–Ω–æ–º–µ—Ä"\n`;
      message += `‚Ä¢ –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å #–Ω–æ–º–µ—Ä"\n`;
      message += `‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–≤–µ—Ç—å—Ç–µ "–î–µ—Ç–∞–ª–∏ #–Ω–æ–º–µ—Ä"`;

      return message;
    } catch (error) {
      console.error('‚ùå Error in handleMyOrders:', error);
      return '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
   */
  static getBotCommands(): Array<{command: string, description: string}> {
    return this.commands.map(cmd => ({
      command: cmd.command,
      description: cmd.description
    }));
  }
}

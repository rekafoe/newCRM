import sharp from 'sharp';
import * as fs from 'fs';
import * as path from 'path';

export interface PhotoSize {
  name: string;
  width: number;
  height: number;
  ratio: number;
}

export interface ProcessingOptions {
  cropMode: 'crop' | 'fit'; // crop - –æ–±—Ä–µ–∑–∞—Ç—å, fit - –≤–ø–∏—Å–∞—Ç—å —Å –±–µ–ª—ã–º–∏ –ø–æ–ª—è–º–∏
  quality: number; // 1-100
  format: 'jpeg' | 'png';
}

export interface ProcessedPhoto {
  originalPath: string;
  processedPath: string;
  size: PhotoSize;
  options: ProcessingOptions;
  metadata: {
    originalWidth: number;
    originalHeight: number;
    processedWidth: number;
    processedHeight: number;
    fileSize: number;
  };
}

export class ImageProcessingService {
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  static readonly PHOTO_SIZES: PhotoSize[] = [
    { name: '9x13', width: 900, height: 1300, ratio: 0.692 },
    { name: '10x15', width: 1000, height: 1500, ratio: 0.667 },
    { name: '13x18', width: 1300, height: 1800, ratio: 0.722 },
    { name: '15x21', width: 1500, height: 2100, ratio: 0.714 },
    { name: '18x24', width: 1800, height: 2400, ratio: 0.75 },
    { name: '20x30', width: 2000, height: 3000, ratio: 0.667 },
    { name: '21x29.7', width: 2100, height: 2970, ratio: 0.707 }
  ];

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
   */
  static async processPhoto(
    inputPath: string, 
    size: PhotoSize, 
    options: ProcessingOptions
  ): Promise<ProcessedPhoto> {
    try {
      console.log(`üñºÔ∏è Processing photo: ${inputPath} to size ${size.name}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const originalMetadata = await sharp(inputPath).metadata();
      const originalWidth = originalMetadata.width || 0;
      const originalHeight = originalMetadata.height || 0;
      
      console.log(`üìè Original size: ${originalWidth}x${originalHeight}`);

      let sharpInstance = sharp(inputPath);

      if (options.cropMode === 'crop') {
        // –†–µ–∂–∏–º –∫—Ä–æ–ø–∞ - –æ–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        sharpInstance = sharpInstance.resize(size.width, size.height, {
          fit: 'cover',
          position: 'center'
        });
      } else {
        // –†–µ–∂–∏–º –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è - –≤–ø–∏—Å—ã–≤–∞–µ–º —Å –±–µ–ª—ã–º–∏ –ø–æ–ª—è–º–∏
        sharpInstance = sharpInstance.resize(size.width, size.height, {
          fit: 'contain',
          background: { r: 255, g: 255, b: 255, alpha: 1 }
        });
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ñ–æ—Ä–º–∞—Ç
      if (options.format === 'jpeg') {
        sharpInstance = sharpInstance.jpeg({ quality: options.quality });
      } else {
        sharpInstance = sharpInstance.png({ quality: options.quality });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const timestamp = Date.now();
      const filename = `processed_${size.name}_${timestamp}.${options.format}`;
      const outputPath = path.join(__dirname, '../uploads/processed', filename);
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const outputDir = path.dirname(outputPath);
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      await sharpInstance.toFile(outputPath);

      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const processedMetadata = await sharp(outputPath).metadata();
      const fileStats = fs.statSync(outputPath);

      const result: ProcessedPhoto = {
        originalPath: inputPath,
        processedPath: outputPath,
        size,
        options,
        metadata: {
          originalWidth,
          originalHeight,
          processedWidth: processedMetadata.width || 0,
          processedHeight: processedMetadata.height || 0,
          fileSize: fileStats.size
        }
      };

      console.log(`‚úÖ Photo processed successfully: ${outputPath}`);
      console.log(`üìä Processed size: ${result.metadata.processedWidth}x${result.metadata.processedHeight}`);
      console.log(`üìÅ File size: ${(result.metadata.fileSize / 1024).toFixed(2)}KB`);

      return result;
    } catch (error) {
      console.error('‚ùå Error processing photo:', error);
      throw error;
    }
  }

  /**
   * –£–º–Ω—ã–π –∫—Ä–æ–ø —Å –ò–ò (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)
   * TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –ò–ò –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  static async smartCrop(
    inputPath: string, 
    size: PhotoSize, 
    options: ProcessingOptions
  ): Promise<ProcessedPhoto> {
    try {
      console.log(`ü§ñ Smart crop processing: ${inputPath}`);
      
      // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ò–ò –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const metadata = await sharp(inputPath).metadata();
      const originalWidth = metadata.width || 0;
      const originalHeight = metadata.height || 0;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –æ–±—Ä–µ–∑–∞—Ç—å
      const targetRatio = size.width / size.height;
      const originalRatio = originalWidth / originalHeight;
      
      let cropOptions: any = {
        fit: 'cover',
        position: 'center'
      };

      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ, –∞ –Ω—É–∂–µ–Ω –∞–ª—å–±–æ–º–Ω—ã–π - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
      if (originalRatio < targetRatio) {
        cropOptions.position = 'top'; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å
      } else if (originalRatio > targetRatio) {
        cropOptions.position = 'center'; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
      }

      const processedOptions = { ...options, cropMode: 'crop' as const };
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—Ä–æ–ø–∞
      const sharpInstance = sharp(inputPath)
        .resize(size.width, size.height, cropOptions);

      if (processedOptions.format === 'jpeg') {
        sharpInstance.jpeg({ quality: processedOptions.quality });
      } else {
        sharpInstance.png({ quality: processedOptions.quality });
      }

      const timestamp = Date.now();
      const filename = `smart_crop_${size.name}_${timestamp}.${processedOptions.format}`;
      const outputPath = path.join(__dirname, '../uploads/processed', filename);
      
      const outputDir = path.dirname(outputPath);
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }

      await sharpInstance.toFile(outputPath);

      const processedMetadata = await sharp(outputPath).metadata();
      const fileStats = fs.statSync(outputPath);

      return {
        originalPath: inputPath,
        processedPath: outputPath,
        size,
        options: processedOptions,
        metadata: {
          originalWidth,
          originalHeight,
          processedWidth: processedMetadata.width || 0,
          processedHeight: processedMetadata.height || 0,
          fileSize: fileStats.size
        }
      };
    } catch (error) {
      console.error('‚ùå Error in smart crop:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
   */
  static getAvailableSizes(): PhotoSize[] {
    return this.PHOTO_SIZES;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  static getSizeByName(name: string): PhotoSize | undefined {
    return this.PHOTO_SIZES.find(size => size.name === name);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static async createPreview(inputPath: string, maxSize: number = 800): Promise<string> {
    try {
      const timestamp = Date.now();
      const filename = `preview_${timestamp}.jpg`;
      const outputPath = path.join(__dirname, '../uploads/previews', filename);
      
      const outputDir = path.dirname(outputPath);
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }

      await sharp(inputPath)
        .resize(maxSize, maxSize, { fit: 'inside', withoutEnlargement: true })
        .jpeg({ quality: 80 })
        .toFile(outputPath);

      return outputPath;
    } catch (error) {
      console.error('‚ùå Error creating preview:', error);
      throw error;
    }
  }
}

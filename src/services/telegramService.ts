// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch (Node.js 18+)
import { TelegramUserService } from './telegramUserService';

export interface TelegramConfig {
  botToken: string;
  chatId?: string; // –°–¥–µ–ª–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
  enabled: boolean;
}

export interface LowStockNotification {
  materialId: number;
  materialName: string;
  currentQuantity: number;
  minQuantity: number;
  supplierName?: string;
  supplierContact?: string;
  categoryName?: string;
}

export interface OrderNotification {
  orderId: number;
  supplierName: string;
  supplierContact?: string;
  materials: Array<{
    name: string;
    quantity: number;
    unit: string;
    price: number;
  }>;
  totalAmount: number;
  deliveryDate?: string;
}

export class TelegramService {
  private static config: TelegramConfig | null = null;
  private static pollingInterval: NodeJS.Timeout | null = null;
  private static lastUpdateId: number = 0;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
   */
  static initialize(config: TelegramConfig) {
    this.config = config;
    console.log('ü§ñ Telegram service initialized:', {
      enabled: config.enabled,
      chatId: config.chatId ? `${config.chatId.substring(0, 4)}...` : 'not set'
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (config.enabled && config.botToken) {
      this.startPolling();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  static getConfig(): TelegramConfig {
    return this.config || {
      botToken: '',
      chatId: undefined,
      enabled: false
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  static isEnabled(): boolean {
    return !!(this.config?.enabled && this.config?.botToken);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
   */
  static async sendLowStockNotification(notification: LowStockNotification): Promise<boolean> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram notifications disabled');
      return false;
    }

    const message = this.formatLowStockMessage(notification);
    const result = await this.sendToAllUsers(message);
    return result.sent > 0;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
   */
  static async sendOrderNotification(notification: OrderNotification): Promise<boolean> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram notifications disabled');
      return false;
    }

    const message = this.formatOrderMessage(notification);
    const result = await this.sendToAllUsers(message);
    return result.sent > 0;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  static async sendNotification(title: string, message: string, priority: 'low' | 'medium' | 'high' = 'medium'): Promise<boolean> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram notifications disabled');
      return false;
    }

    const emoji = priority === 'high' ? 'üö®' : priority === 'medium' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    const formattedMessage = `${emoji} *${title}*\n\n${message}`;
    
    const result = await this.sendToAllUsers(formattedMessage);
    return result.sent > 0;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
   */
  private static async sendMessage(message: string): Promise<boolean> {
    if (!this.config) {
      console.error('‚ùå Telegram config not initialized');
      return false;
    }

    try {
      const url = `https://api.telegram.org/bot${this.config.botToken}/sendMessage`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.config.chatId,
          text: message,
          parse_mode: 'Markdown',
          disable_web_page_preview: true
        })
      });

      const data = await response.json();

      if (data.ok) {
        console.log('‚úÖ Telegram message sent successfully');
        return true;
      } else {
        console.error('‚ùå Telegram API error:', data);
        return false;
      }
    } catch (error: any) {
      console.error('‚ùå Failed to send Telegram message:', error.message);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
   */
  private static formatLowStockMessage(notification: LowStockNotification): string {
    const { materialName, currentQuantity, minQuantity, supplierName, supplierContact, categoryName } = notification;
    
    let message = `üö® *–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞*\n\n`;
    message += `üì¶ *–ú–∞—Ç–µ—Ä–∏–∞–ª:* ${materialName}\n`;
    message += `üìä *–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:* ${currentQuantity}\n`;
    message += `‚ö†Ô∏è *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:* ${minQuantity}\n`;
    
    if (categoryName) {
      message += `üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${categoryName}\n`;
    }
    
    if (supplierName) {
      message += `üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* ${supplierName}\n`;
    }
    
    if (supplierContact) {
      message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${supplierContact}\n`;
    }
    
    message += `\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å`;
    
    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
   */
  private static formatOrderMessage(notification: OrderNotification): string {
    const { orderId, supplierName, supplierContact, materials, totalAmount, deliveryDate } = notification;
    
    let message = `üìã *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É*\n\n`;
    message += `üÜî *–ó–∞–∫–∞–∑ ‚Ññ:* ${orderId}\n`;
    message += `üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* ${supplierName}\n`;
    
    if (supplierContact) {
      message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${supplierContact}\n`;
    }
    
    if (deliveryDate) {
      message += `üìÖ *–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏:* ${deliveryDate}\n`;
    }
    
    message += `\nüì¶ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*\n`;
    
    materials.forEach((material, index) => {
      message += `${index + 1}. ${material.name} - ${material.quantity} ${material.unit} (${material.price} BYN)\n`;
    });
    
    message += `\nüí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* ${totalAmount.toFixed(2)} BYN`;
    
    return message;
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static async sendTestMessage(): Promise<boolean> {
    const testMessage = `üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`;
    const result = await this.sendToAllUsers(testMessage);
    return result.sent > 0;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  static async sendToAllUsers(message: string): Promise<{ sent: number; failed: number }> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram service is not enabled');
      return { sent: 0, failed: 0 };
    }

    try {
      const users = await TelegramUserService.getActiveUsers();
      let sent = 0;
      let failed = 0;

      for (const user of users) {
        try {
          const success = await this.sendMessageToUser(user.chat_id, message);
          if (success) {
            sent++;
            console.log(`‚úÖ Message sent to ${user.username || user.first_name || user.chat_id}`);
          } else {
            failed++;
            console.log(`‚ùå Failed to send message to ${user.username || user.first_name || user.chat_id}`);
          }
        } catch (error) {
          failed++;
          console.error(`‚ùå Error sending to ${user.username || user.first_name || user.chat_id}:`, error);
        }
      }

      console.log(`üìä Message delivery: ${sent} sent, ${failed} failed`);
      return { sent, failed };
    } catch (error) {
      console.error('‚ùå Error sending to all users:', error);
      return { sent: 0, failed: 0 };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
   */
  static async sendToRole(role: string, message: string): Promise<{ sent: number; failed: number }> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram service is not enabled');
      return { sent: 0, failed: 0 };
    }

    try {
      const users = await TelegramUserService.getUsersByRole(role);
      let sent = 0;
      let failed = 0;

      for (const user of users) {
        try {
          const success = await this.sendMessageToUser(user.chat_id, message);
          if (success) {
            sent++;
            console.log(`‚úÖ Message sent to ${user.username || user.first_name || user.chat_id} (${role})`);
          } else {
            failed++;
            console.log(`‚ùå Failed to send message to ${user.username || user.first_name || user.chat_id} (${role})`);
          }
        } catch (error) {
          failed++;
          console.error(`‚ùå Error sending to ${user.username || user.first_name || user.chat_id} (${role}):`, error);
        }
      }

      console.log(`üìä Message delivery to ${role}: ${sent} sent, ${failed} failed`);
      return { sent, failed };
    } catch (error) {
      console.error(`‚ùå Error sending to role ${role}:`, error);
      return { sent: 0, failed: 0 };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ chat_id
   */
  static async sendMessageToUser(chatId: string, message: string): Promise<boolean> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram service is not enabled');
      return false;
    }

    try {
      const response = await fetch(`https://api.telegram.org/bot${this.config!.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown'
        })
      });

      const result = await response.json();
      
      if (result.ok) {
        console.log(`‚úÖ Message sent to chat ${chatId}`);
        return true;
      } else {
        console.error(`‚ùå Telegram API error for chat ${chatId}:`, result);
        return false;
      }
    } catch (error) {
      console.error(`‚ùå Error sending message to chat ${chatId}:`, error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  static async sendLowStockToUsers(notification: LowStockNotification): Promise<{ sent: number; failed: number }> {
    const message = this.formatLowStockMessage(notification);
    
    try {
      const users = await TelegramUserService.getActiveUsers();
      let sent = 0;
      let failed = 0;

      for (const user of users) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!user.notification_preferences.low_stock) {
          console.log(`‚ö†Ô∏è Low stock notifications disabled for ${user.username || user.first_name || user.chat_id}`);
          continue;
        }

        try {
          const success = await this.sendMessageToUser(user.chat_id, message);
          if (success) {
            sent++;
          } else {
            failed++;
          }
        } catch (error) {
          failed++;
          console.error(`‚ùå Error sending low stock notification to ${user.username || user.first_name || user.chat_id}:`, error);
        }
      }

      console.log(`üìä Low stock notification delivery: ${sent} sent, ${failed} failed`);
      return { sent, failed };
    } catch (error) {
      console.error('‚ùå Error sending low stock notifications:', error);
      return { sent: 0, failed: 0 };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
   */
  private static startPolling() {
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
    }

    console.log('üîÑ Starting Telegram polling...');
    
    this.pollingInterval = setInterval(async () => {
      try {
        await this.getUpdates();
      } catch (error) {
        console.error('‚ùå Error in Telegram polling:', error);
      }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram API
   */
  private static async getUpdates() {
    if (!this.config?.botToken) return;

    try {
      const url = `https://api.telegram.org/bot${this.config.botToken}/getUpdates?offset=${this.lastUpdateId + 1}&timeout=1`;
      
      const response = await fetch(url);
      const data = await response.json();

      if (data.ok && data.result.length > 0) {
        for (const update of data.result) {
          this.lastUpdateId = update.update_id;
          await this.handleUpdate(update);
        }
      }
    } catch (error) {
      console.error('‚ùå Error getting Telegram updates:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
   */
  private static async handleUpdate(update: any) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const { TelegramWebhookController } = await import('../controllers/telegramWebhookController');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      console.log('üîò Received callback query via polling:', {
        callback_id: update.callback_query.id,
        chat_id: update.callback_query.message?.chat?.id,
        user_id: update.callback_query.from?.id,
        data: update.callback_query.data
      });
      
      await (TelegramWebhookController as any).handleCallbackQuery(update.callback_query);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!update.message) return;

    const { from, chat, text, photo, document } = update.message;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç –±–æ—Ç–∞
    if (from.is_bot) return;

    console.log('üì® Received message via polling:', {
      chat_id: chat.id,
      user_id: from.id,
      text: text?.substring(0, 50) + '...',
      has_photo: !!photo,
      has_document: !!document
    });

    await (TelegramWebhookController as any).handleUserMessage(from, chat, text, photo, document);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  static async sendDocumentToUser(chatId: string, filePath: string, caption?: string): Promise<boolean> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram service is not enabled');
      return false;
    }

    try {
      const FormData = require('form-data');
      const fs = require('fs');
      const https = require('https');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
      if (!fs.existsSync(filePath)) {
        console.error(`‚ùå File not found: ${filePath}`);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const stats = fs.statSync(filePath);
      const fileSizeInMB = stats.size / (1024 * 1024);
      
      if (fileSizeInMB > 50) {
        console.error(`‚ùå File too large: ${fileSizeInMB.toFixed(2)}MB (max 50MB)`);
        return false;
      }

      console.log(`üì§ Sending document to ${chatId}: ${filePath} (${fileSizeInMB.toFixed(2)}MB)`);

      const form = new FormData();
      form.append('chat_id', chatId);
      form.append('document', fs.createReadStream(filePath));
      if (caption) {
        form.append('caption', caption);
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º https –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      return new Promise((resolve) => {
        const req = https.request({
          hostname: 'api.telegram.org',
          port: 443,
          path: `/bot${this.config!.botToken}/sendDocument`,
          method: 'POST',
          headers: form.getHeaders()
        }, (res) => {
          let data = '';
          
          res.on('data', (chunk) => {
            data += chunk;
          });
          
          res.on('end', () => {
            try {
              const result = JSON.parse(data);
              if (result.ok) {
                console.log(`‚úÖ Document sent to ${chatId}`);
                resolve(true);
              } else {
                console.error(`‚ùå Failed to send document to ${chatId}:`, result);
                resolve(false);
              }
            } catch (error) {
              console.error(`‚ùå JSON parse error: ${error}`);
              console.error(`‚ùå Response data: ${data}`);
              resolve(false);
            }
          });
        });

        req.on('error', (error) => {
          console.error(`‚ùå Request error: ${error}`);
          resolve(false);
        });

        form.pipe(req);
      });
      
    } catch (error) {
      console.error(`‚ùå Error sending document to ${chatId}:`, error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
   */
  static async sendMessageWithKeyboard(chatId: string, message: string, keyboard: any): Promise<boolean> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram service is not enabled');
      return false;
    }

    try {
      const url = `https://api.telegram.org/bot${this.config!.botToken}/sendMessage`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }),
      });

      const result = await response.json();
      
      if (result.ok) {
        console.log(`‚úÖ Message with keyboard sent to ${chatId}`);
        return true;
      } else {
        console.error(`‚ùå Failed to send message with keyboard to ${chatId}:`, result);
        return false;
      }
    } catch (error) {
      console.error(`‚ùå Error sending message with keyboard to ${chatId}:`, error);
      return false;
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
   */
  static async editMessageWithKeyboard(chatId: string, messageId: number, message: string, keyboard: any): Promise<boolean> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram service is not enabled');
      return false;
    }

    try {
      const url = `https://api.telegram.org/bot${this.config!.botToken}/editMessageText`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text: message,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }),
      });

      const result = await response.json();
      
      if (result.ok) {
        console.log(`‚úÖ Message with keyboard edited for ${chatId}`);
        return true;
      } else {
        console.error(`‚ùå Failed to edit message with keyboard for ${chatId}:`, result);
        return false;
      }
    } catch (error) {
      console.error(`‚ùå Error editing message with keyboard for ${chatId}:`, error);
      return false;
    }
  }

  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ callback query
   */
  static async answerCallbackQuery(callbackQueryId: string, text?: string, showAlert: boolean = false): Promise<boolean> {
    if (!this.isEnabled()) {
      console.log('‚ö†Ô∏è Telegram service is not enabled');
      return false;
    }

    try {
      const url = `https://api.telegram.org/bot${this.config!.botToken}/answerCallbackQuery`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text: text,
          show_alert: showAlert
        }),
      });

      const result = await response.json();
      
      if (result.ok) {
        console.log(`‚úÖ Callback query answered: ${callbackQueryId}`);
        return true;
      } else {
        console.error(`‚ùå Failed to answer callback query ${callbackQueryId}:`, result);
        return false;
      }
    } catch (error) {
      console.error(`‚ùå Error answering callback query ${callbackQueryId}:`, error);
      return false;
    }
  }
}

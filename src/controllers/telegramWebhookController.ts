import { Request, Response } from 'express';
import { TelegramUserService } from '../services/telegramUserService';
import { TelegramSettingsService } from '../services/telegramSettingsService';
import { TelegramBotCommands } from '../services/telegramBotCommands';
import { TelegramService } from '../services/telegramService';
import { PhotoOrderService } from '../services/photoOrderService';
import { ImageProcessingService } from '../services/imageProcessingService';
import { PhotoOrderSessionService } from '../services/photoOrderSessionService';

export interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name?: string;
      last_name?: string;
      username?: string;
      type: string;
    };
    date: number;
    text?: string;
    photo?: Array<{
      file_id: string;
      file_unique_id: string;
      width: number;
      height: number;
      file_size?: number;
    }>;
    document?: {
      file_id: string;
      file_unique_id: string;
      file_name?: string;
      mime_type?: string;
      file_size?: number;
    };
  };
  callback_query?: {
    id: string;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
      language_code?: string;
    };
    message?: {
      message_id: number;
      chat: {
        id: number;
        first_name?: string;
        last_name?: string;
        username?: string;
        type: string;
      };
    };
    data: string;
  };
}

export class TelegramWebhookController {
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
   */
  static async handleWebhook(req: Request, res: Response) {
    try {
      const update: TelegramUpdate = req.body;
      
      console.log('üì® Received Telegram webhook:', {
        update_id: update.update_id,
        has_message: !!update.message,
        chat_id: update.message?.chat.id,
        user_id: update.message?.from.id,
        text: update.message?.text?.substring(0, 50) + '...',
        full_body: JSON.stringify(req.body, null, 2)
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
        return res.json({ success: true, message: 'Callback query processed' });
      }

      if (!update.message) {
        return res.json({ success: true, message: 'No message in update' });
      }

      const { from, chat, text, photo, document } = update.message;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç –±–æ—Ç–∞
      if (from.is_bot) {
        return res.json({ success: true, message: 'Message from bot, ignoring' });
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.handleUserMessage(from, chat, text, photo, document);

      res.json({ success: true, message: 'Webhook processed successfully' });
    } catch (error: any) {
      console.error('‚ùå Error processing Telegram webhook:', error);
      res.status(500).json({
        success: false,
        message: 'Error processing webhook',
        error: error.message
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static async handleUserMessage(from: any, chat: any, text?: string, photo?: any[], document?: any) {
    const chatId = chat.id.toString();
    
    console.log(`üîç Processing user message for chat_id: ${chatId}, user: ${from.first_name}, text: ${text}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await TelegramUserService.getUserByChatId(chatId);
      console.log(`üë§ Existing user check for ${chatId}:`, existingUser ? 'EXISTS' : 'NOT FOUND');
      
      if (existingUser) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        console.log(`üîÑ Updating existing user: ${from.first_name} (${chatId})`);
        await this.updateUserInfo(existingUser, from, chat);
        console.log(`‚úÖ Updated existing user: ${from.first_name} (${chatId})`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
        if (text && text.startsWith('/')) {
          console.log(`ü§ñ Processing command: ${text}`);
          const response = await TelegramBotCommands.handleMessage(chatId, from.id.toString(), text);
          if (response) {
            await this.sendMessageToUser(chatId, response);
          }
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        else if (photo && photo.length > 0) {
          console.log(`üì∏ Processing photo upload from ${from.first_name}`);
          await this.handlePhotoUpload(chatId, from, photo, text);
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª—ã)
        else if (document && this.isImageDocument(document)) {
          console.log(`üìÑ Processing image document from ${from.first_name}`);
          await this.handleDocumentUpload(chatId, from, document, text);
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.createNewUser(from, chat);
        console.log(`üÜï Created new user: ${from.first_name} (${chatId})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        const welcomeMessage = await TelegramBotCommands.handleStart(chatId, from.id.toString());
        await this.sendMessageToUser(chatId, welcomeMessage);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (!existingUser) {
        try {
          console.log('‚è∞ Getting welcome_message_enabled with timeout...');
          const welcomePromise = TelegramSettingsService.getSetting('welcome_message_enabled');
          const welcomeTimeoutPromise = new Promise<string>((resolve) => {
            setTimeout(() => {
              console.log('‚è∞ welcome_message_enabled timeout, using default: true');
              resolve('true');
            }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
          });
          
          const welcomeEnabled = await Promise.race([welcomePromise, welcomeTimeoutPromise]) || 'true';
          console.log(`üí¨ Welcome message enabled: ${welcomeEnabled}`);
          
          if (welcomeEnabled === 'true') {
            await this.sendWelcomeMessage(chatId, from.first_name);
          }
        } catch (error) {
          console.error('‚ùå Error getting welcome_message_enabled:', error);
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          await this.sendWelcomeMessage(chatId, from.first_name);
        }
      }

    } catch (error) {
      console.error(`‚ùå Error handling user message for ${chatId}:`, error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static async createNewUser(from: any, chat: any) {
    const chatId = chat.id.toString();
    
    console.log(`üÜï Creating new user for chat_id: ${chatId}, name: ${from.first_name}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    let autoAddUsers: string | null = null;
    
    try {
      console.log('‚è∞ Starting settings check with timeout...');
      const settingsPromise = TelegramSettingsService.getSetting('auto_add_users');
      const timeoutPromise = new Promise<string>((resolve) => {
        setTimeout(() => {
          console.log('‚è∞ Settings check timeout, using default: true');
          resolve('true');
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      autoAddUsers = await Promise.race([settingsPromise, timeoutPromise]);
      console.log(`‚öôÔ∏è Auto-add users setting: ${autoAddUsers}`);
    } catch (error) {
      console.error('‚ùå Error getting auto_add_users setting:', error);
      autoAddUsers = 'true';
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (autoAddUsers === null || autoAddUsers === undefined) {
      console.log('‚ö†Ô∏è Could not get auto_add_users setting, using default: true');
      autoAddUsers = 'true';
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ null, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º true
    if (!autoAddUsers) {
      console.log('‚ö†Ô∏è autoAddUsers is falsy, forcing to true');
      autoAddUsers = 'true';
    }
    
    if (autoAddUsers !== 'true') {
      console.log('‚ö†Ô∏è Auto-add users is disabled, skipping user creation');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let defaultRole = 'client';
    try {
      console.log('‚è∞ Getting default_role with timeout...');
      const rolePromise = TelegramSettingsService.getSetting('default_role');
      const roleTimeoutPromise = new Promise<string>((resolve) => {
        setTimeout(() => {
          console.log('‚è∞ default_role timeout, using default: client');
          resolve('client');
        }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
      });
      
      defaultRole = await Promise.race([rolePromise, roleTimeoutPromise]) || 'client';
      console.log(`üé≠ Default role: ${defaultRole}`);
    } catch (error) {
      console.error('‚ùå Error getting default_role:', error);
      defaultRole = 'client';
    }
    
    let role = defaultRole; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –º–æ–∂–Ω–æ –¥–∞—Ç—å —Ä–æ–ª—å "manager"
    if (chat.type === 'group' || chat.type === 'supergroup') {
      role = 'manager';
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    const notificationPreferences = {
      low_stock: false,        // –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
      new_orders: true,        // –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
      system_alerts: false     // –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –ø–æ–ª—É—á–∞—é—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    };

    // –ï—Å–ª–∏ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞, —Ä–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if (role === 'manager') {
      notificationPreferences.low_stock = true;
      notificationPreferences.system_alerts = true;
    }

    console.log(`üë§ Creating user with data:`, {
      chat_id: chatId,
      username: from.username,
      first_name: from.first_name,
      last_name: from.last_name,
      role: role,
      notifications_enabled: true,
      notification_preferences: notificationPreferences
    });

    try {
      const newUser = await TelegramUserService.createUser({
        chat_id: chatId,
        username: from.username,
        first_name: from.first_name,
        last_name: from.last_name,
        role: role,
        notifications_enabled: true,
        notification_preferences: notificationPreferences
      });

      console.log(`‚úÖ User created successfully:`, newUser);
    } catch (error) {
      console.error(`‚ùå Error creating user:`, error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  private static async updateUserInfo(user: any, from: any, chat: any) {
    const updates: any = {};
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if (user.username !== from.username) {
      updates.username = from.username;
    }
    if (user.first_name !== from.first_name) {
      updates.first_name = from.first_name;
    }
    if (user.last_name !== from.last_name) {
      updates.last_name = from.last_name;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (Object.keys(updates).length > 0) {
      console.log(`üîÑ Updating user info:`, updates);
      await TelegramUserService.updateUser(user.id, updates);
    } else {
      console.log(`‚úÖ User info is up to date, no updates needed`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private static async sendWelcomeMessage(chatId: string, firstName: string) {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TelegramService –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const { TelegramService } = await import('../services/telegramService');
      
      const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—à–µ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏!

ü§ñ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üõí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
‚Ä¢ üí¨ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏

üë§ *–í–∞—à —Å—Ç–∞—Ç—É—Å:* –ö–ª–∏–µ–Ω—Ç
–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ.

üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏! üéâ`;

      await TelegramService.sendMessageToUser(chatId, welcomeMessage);
    } catch (error) {
      console.error('‚ùå Error sending welcome message:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  private static async sendMessageToUser(chatId: string, message: string): Promise<void> {
    try {
      await TelegramService.sendMessageToUser(chatId, message);
    } catch (error) {
      console.error(`‚ùå Error sending message to ${chatId}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
   */
  static async getWebhookInfo(req: Request, res: Response) {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
      res.json({
        success: true,
        data: {
          webhook_url: process.env.TELEGRAM_WEBHOOK_URL || 'Not configured',
          bot_username: process.env.TELEGRAM_BOT_USERNAME || 'Not configured',
          last_update: new Date().toISOString()
        }
      });
    } catch (error: any) {
      console.error('‚ùå Error getting webhook info:', error);
      res.status(500).json({
        success: false,
        message: 'Error getting webhook info',
        error: error.message
      });
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
   */
  static async setWebhook(req: Request, res: Response) {
    try {
      const { webhookUrl } = req.body;
      
      if (!webhookUrl) {
        return res.status(400).json({
          success: false,
          message: 'Webhook URL is required'
        });
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook —á–µ—Ä–µ–∑ Telegram API
      console.log(`üîó Setting webhook URL: ${webhookUrl}`);
      
      res.json({
        success: true,
        message: 'Webhook URL set successfully',
        data: { webhook_url: webhookUrl }
      });
    } catch (error: any) {
      console.error('‚ùå Error setting webhook:', error);
      res.status(500).json({
        success: false,
        message: 'Error setting webhook',
        error: error.message
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
   */
  private static async handlePhotoUpload(chatId: string, from: any, photos: any[], caption?: string) {
    try {
      console.log(`üì∏ Handling photo upload from ${from.first_name}, photos: ${photos.length}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const largestPhoto = photos.reduce((prev, current) => 
        (current.file_size || 0) > (prev.file_size || 0) ? current : prev
      );
      
      console.log(`üìè Largest photo: ${largestPhoto.width}x${largestPhoto.height}, size: ${largestPhoto.file_size} bytes`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–∫–∞–∑–∞
      const session = PhotoOrderSessionService.getSession(chatId);
      
      if (session) {
        console.log(`üìã Found active session for ${chatId}: ${session.sizeName}, ${session.mode}, ${session.quantity}`);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
        const size = ImageProcessingService.getSizeByName(session.sizeName);
        if (!size) {
          await this.sendMessageToUser(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
          PhotoOrderSessionService.clearSession(chatId);
          return;
        }

        const processingOptions = {
          cropMode: session.mode as 'crop' | 'fit',
          quality: 90,
          format: 'jpeg' as const
        };

        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const order = await PhotoOrderService.createOrder({
          chatId,
          username: from.username,
          firstName: from.first_name,
          originalPhotos: [`telegram_photo_${largestPhoto.file_id}`], // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å
          selectedSize: size,
          processingOptions,
          quantity: session.quantity,
          notes: '–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞'
        });

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        PhotoOrderSessionService.clearSession(chatId);

        await this.sendMessageToUser(chatId, 
          `‚úÖ *–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!*\n\n` +
          `üÜî –ó–∞–∫–∞–∑ #${order.id}\n` +
          `üìè –†–∞–∑–º–µ—Ä: ${size.name}\n` +
          `üé® –†–µ–∂–∏–º: ${session.mode === 'crop' ? '–ö—Ä–æ–ø' : session.mode === 'fit' ? '–í–ø–∏—Å–∞—Ç—å —Å –ø–æ–ª—è–º–∏' : '–£–º–Ω—ã–π –∫—Ä–æ–ø'}\n` +
          `üì¶ –ö–æ–ø–∏–π: ${session.quantity}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${(order.totalPrice / 100).toFixed(0)} —Ä—É–±.\n\n` +
          `üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç.\n` +
          `üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n` +
          `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_orders –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.`
        );
        
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      const pendingOrders = await PhotoOrderService.getOrdersByChatId(chatId);
      const activeOrder = pendingOrders.find(order => 
        ['pending', 'processing'].includes(order.status)
      );
      
      if (activeOrder) {
        await this.sendMessageToUser(chatId, 
          `üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞–∫–∞–∑—É #${activeOrder.id}\n\n` +
          `üìã –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n` +
          `‚Ä¢ –†–∞–∑–º–µ—Ä: ${activeOrder.selectedSize.name}\n` +
          `‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${activeOrder.originalPhotos.length + 1}\n` +
          `‚Ä¢ –ö–æ–ø–∏–π: ${activeOrder.quantity}\n\n` +
          `üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.`
        );
        return;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      await this.sendMessageToUser(chatId, 
        `üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\n\n` +
        `üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order_photo\n` +
        `üìã –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
        `"–ó–∞–∫–∞–∑: 10x15, 2 –∫–æ–ø–∏–∏, –∫—Ä–æ–ø"\n` +
        `+ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏`
      );
      
    } catch (error) {
      console.error('‚ùå Error handling photo upload:', error);
      await this.sendMessageToUser(chatId, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
   */
  private static async handleDocumentUpload(chatId: string, from: any, document: any, caption?: string) {
    try {
      console.log(`üìÑ Handling document upload from ${from.first_name}, file: ${document.file_name}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      const pendingOrders = await PhotoOrderService.getOrdersByChatId(chatId);
      const activeOrder = pendingOrders.find(order => 
        ['pending', 'processing'].includes(order.status)
      );
      
      if (activeOrder) {
        await this.sendMessageToUser(chatId, 
          `üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É #${activeOrder.id}\n\n` +
          `üìã –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n` +
          `‚Ä¢ –†–∞–∑–º–µ—Ä: ${activeOrder.selectedSize.name}\n` +
          `‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${activeOrder.originalPhotos.length + 1}\n` +
          `‚Ä¢ –ö–æ–ø–∏–π: ${activeOrder.quantity}\n\n` +
          `üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.`
        );
        return;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      await this.sendMessageToUser(chatId, 
        `üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!\n\n` +
        `üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order_photo\n` +
        `üìã –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
        `"–ó–∞–∫–∞–∑: 10x15, 2 –∫–æ–ø–∏–∏, –∫—Ä–æ–ø"\n` +
        `+ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã`
      );
      
    } catch (error) {
      console.error('‚ùå Error handling document upload:', error);
      await this.sendMessageToUser(chatId, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  private static isImageDocument(document: any): boolean {
    if (!document.mime_type) return false;
    
    const imageMimeTypes = [
      'image/jpeg',
      'image/jpg', 
      'image/png',
      'image/gif',
      'image/webp'
    ];
    
    return imageMimeTypes.includes(document.mime_type.toLowerCase());
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
   */
  private static async handleCallbackQuery(callbackQuery: any) {
    try {
      const { id, from, message, data } = callbackQuery;
      const chatId = message?.chat?.id?.toString();
      
      console.log(`üîò Callback query from ${from.first_name}: ${data}`);

      if (!chatId) {
        console.error('‚ùå No chat ID in callback query');
        return;
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await TelegramService.answerCallbackQuery(id, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback data
      if (data.startsWith('size_')) {
        await this.handleSizeSelection(chatId, data, message.message_id);
      } else if (data.startsWith('mode_')) {
        await this.handleModeSelection(chatId, data, message.message_id);
      } else if (data.startsWith('qty_')) {
        await this.handleQuantitySelection(chatId, data, message.message_id);
      } else if (data.startsWith('confirm_')) {
        await this.handleOrderConfirmation(chatId, data);
      } else if (data.startsWith('cancel_')) {
        await this.handleOrderCancellation(chatId, data);
      } else if (data === 'back_to_sizes') {
        await this.handleBackToSizes(chatId, message.message_id);
      } else if (data.startsWith('back_to_mode_')) {
        await this.handleBackToMode(chatId, data, message.message_id);
      }

    } catch (error) {
      console.error('‚ùå Error handling callback query:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
   */
  private static async handleSizeSelection(chatId: string, data: string, messageId: number) {
    const sizeName = data.replace('size_', '');
    const size = ImageProcessingService.getSizeByName(sizeName);
    
    if (!size) {
      await TelegramService.sendMessageToUser(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
      return;
    }

    const prices = PhotoOrderService.getAllPrices();
    const price = prices[sizeName] || 0;
    const priceRub = (price / 100).toFixed(0);

    const message = `üìè *–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: ${sizeName}*\n\n` +
                   `üìê –†–∞–∑–º–µ—Ä—ã: ${size.width}x${size.height} –ø–∏–∫—Å–µ–ª–µ–π\n` +
                   `üí∞ –¶–µ–Ω–∞: ${priceRub} —Ä—É–±. –∑–∞ –∫–æ–ø–∏—é\n\n` +
                   `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:*`;

    const keyboard = TelegramBotCommands.getProcessingModeKeyboard(sizeName);
    await TelegramService.editMessageWithKeyboard(chatId, messageId, message, keyboard);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private static async handleModeSelection(chatId: string, data: string, messageId: number) {
    const parts = data.split('_');
    const mode = parts[1]; // crop, fit, smart
    const sizeName = parts[2];

    const modeText = {
      'crop': '‚úÇÔ∏è –ö—Ä–æ–ø (–æ–±—Ä–µ–∑–∞—Ç—å –ø–æ–¥ —Ä–∞–∑–º–µ—Ä)',
      'fit': 'üìê –í–ø–∏—Å–∞—Ç—å (—Å –±–µ–ª—ã–º–∏ –ø–æ–ª—è–º–∏)',
      'smart': 'ü§ñ –£–º–Ω—ã–π –∫—Ä–æ–ø (–ò–ò)'
    }[mode] || mode;

    const message = `üé® *–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${modeText}*\n\n` +
                   `üìè –†–∞–∑–º–µ—Ä: ${sizeName}\n\n` +
                   `üí° *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π:*`;

    const keyboard = TelegramBotCommands.getQuantityKeyboard(sizeName, mode);
    await TelegramService.editMessageWithKeyboard(chatId, messageId, message, keyboard);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π
   */
  private static async handleQuantitySelection(chatId: string, data: string, messageId: number) {
    const parts = data.split('_');
    const quantity = parseInt(parts[1]);
    const mode = parts[2];
    const sizeName = parts[3];

    const size = ImageProcessingService.getSizeByName(sizeName);
    const prices = PhotoOrderService.getAllPrices();
    const pricePerCopy = prices[sizeName] || 0;
    const totalPrice = pricePerCopy * quantity;
    const totalPriceRub = (totalPrice / 100).toFixed(0);

    const modeText = {
      'crop': '‚úÇÔ∏è –ö—Ä–æ–ø',
      'fit': 'üìê –í–ø–∏—Å–∞—Ç—å —Å –ø–æ–ª—è–º–∏',
      'smart': 'ü§ñ –£–º–Ω—ã–π –∫—Ä–æ–ø'
    }[mode] || mode;

    const message = `üìã *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞:*\n\n` +
                   `üìè –†–∞–∑–º–µ—Ä: ${sizeName}\n` +
                   `üé® –†–µ–∂–∏–º: ${modeText}\n` +
                   `üì¶ –ö–æ–ø–∏–π: ${quantity}\n` +
                   `üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–æ–ø–∏—é: ${(pricePerCopy / 100).toFixed(0)} —Ä—É–±.\n` +
                   `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPriceRub} —Ä—É–±.\n\n` +
                   `üì∏ *–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!*\n` +
                   `(–¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)`;

    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await TelegramService.editMessageWithKeyboard(chatId, messageId, message, { inline_keyboard: [] });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ –≤ —Å–µ—Å—Å–∏–∏
    PhotoOrderSessionService.saveSession(chatId, sizeName, mode, quantity);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
   */
  private static async handleOrderConfirmation(chatId: string, data: string) {
    const orderId = data.replace('confirm_', '');
    
    await TelegramService.sendMessageToUser(chatId, 
      `‚úÖ *–ó–∞–∫–∞–∑ #${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n` +
      `üì∏ –í–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç.\n` +
      `üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n` +
      `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_orders –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.`
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
   */
  private static async handleOrderCancellation(chatId: string, data: string) {
    const orderId = data.replace('cancel_', '');
    
    await TelegramService.sendMessageToUser(chatId, 
      `‚ùå *–ó–∞–∫–∞–∑ #${orderId} –æ—Ç–º–µ–Ω–µ–Ω.*\n\n` +
      `üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é /order_photo`
    );
  }

  /**
   * –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–æ–≤
   */
  private static async handleBackToSizes(chatId: string, messageId: number) {
    const message = `üì∏ *–ó–ê–ö–ê–ó –ü–ï–ß–ê–¢–ò –§–û–¢–û–ì–†–ê–§–ò–ô*\n\n` +
                   `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:*\n` +
                   `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –Ω–∏–∂–µ ‚¨áÔ∏è`;

    const keyboard = TelegramBotCommands.getSizeSelectionKeyboard();
    await TelegramService.editMessageWithKeyboard(chatId, messageId, message, keyboard);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private static async handleBackToMode(chatId: string, data: string, messageId: number) {
    const sizeName = data.replace('back_to_mode_', '');
    
    const message = `üìè *–†–∞–∑–º–µ—Ä: ${sizeName}*\n\n` +
                   `üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:*`;

    const keyboard = TelegramBotCommands.getProcessingModeKeyboard(sizeName);
    await TelegramService.editMessageWithKeyboard(chatId, messageId, message, keyboard);
  }
}

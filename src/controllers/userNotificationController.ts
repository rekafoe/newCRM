import { Request, Response } from 'express';
import { UserNotificationService } from '../services/userNotificationService';

export class UserNotificationController {
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  static async getAllUsers(req: Request, res: Response) {
    try {
      const users = await UserNotificationService.getAllUsers();
      
      res.json({
        success: true,
        data: users
      });
    } catch (error: any) {
      console.error('‚ùå Error getting users:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        error: error.message
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏
   */
  static async getUsersByRole(req: Request, res: Response) {
    try {
      const { role } = req.params;
      const users = await UserNotificationService.getUsersByRole(role);
      
      res.json({
        success: true,
        data: users
      });
    } catch (error: any) {
      console.error('‚ùå Error getting users by role:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏',
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  static async sendToUser(req: Request, res: Response) {
    try {
      const { userId } = req.params;
      const { title, message, priority, type, data } = req.body;
      
      const notification = {
        title,
        message,
        priority: priority || 'medium',
        type: type || 'general',
        data
      };
      
      const success = await UserNotificationService.sendToUser(parseInt(userId), notification);
      
      if (success) {
        res.json({
          success: true,
          message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
        });
      } else {
        res.status(400).json({
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
        });
      }
    } catch (error: any) {
      console.error('‚ùå Error sending notification to user:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª–∏
   */
  static async sendToRole(req: Request, res: Response) {
    try {
      const { role } = req.params;
      const { title, message, priority, type, data } = req.body;
      
      const notification = {
        title,
        message,
        priority: priority || 'medium',
        type: type || 'general',
        data
      };
      
      const sentCount = await UserNotificationService.sendToRole(role, notification);
      
      res.json({
        success: true,
        message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–æ–ª–∏ ${role}`,
        sentCount
      });
    } catch (error: any) {
      console.error('‚ùå Error sending notification to role:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–ª–∏',
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  static async sendToAllUsers(req: Request, res: Response) {
    try {
      const { title, message, priority, type, data } = req.body;
      
      const notification = {
        title,
        message,
        priority: priority || 'medium',
        type: type || 'general',
        data
      };
      
      const sentCount = await UserNotificationService.sendToAllUsers(notification);
      
      res.json({
        success: true,
        message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`,
        sentCount
      });
    } catch (error: any) {
      console.error('‚ùå Error sending notification to all users:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
   */
  static async sendLowStockAlert(req: Request, res: Response) {
    try {
      const { materialName, currentQuantity, minStock, supplierName } = req.body;
      
      const sentCount = await UserNotificationService.sendLowStockAlert(
        materialName,
        currentQuantity,
        minStock,
        supplierName
      );
      
      res.json({
        success: true,
        message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –∞–¥–º–∏–Ω–∞–º`,
        sentCount
      });
    } catch (error: any) {
      console.error('‚ùå Error sending low stock alert:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö',
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
   */
  static async sendNewOrderAlert(req: Request, res: Response) {
    try {
      const { orderId, customerName, totalAmount } = req.body;
      
      const sentCount = await UserNotificationService.sendNewOrderAlert(
        orderId,
        customerName,
        totalAmount
      );
      
      res.json({
        success: true,
        message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`,
        sentCount
      });
    } catch (error: any) {
      console.error('‚ùå Error sending new order alert:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ',
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  static async sendSystemAlert(req: Request, res: Response) {
    try {
      const { title, message, priority } = req.body;
      
      const sentCount = await UserNotificationService.sendSystemAlert(
        title,
        message,
        priority
      );
      
      res.json({
        success: true,
        message: `–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`,
        sentCount
      });
    } catch (error: any) {
      console.error('‚ùå Error sending system alert:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        error: error.message
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async updateUserTelegramChatId(req: Request, res: Response) {
    try {
      const { userId } = req.params;
      const { chatId } = req.body;
      
      const success = await UserNotificationService.updateUserTelegramChatId(
        parseInt(userId),
        chatId
      );
      
      if (success) {
        res.json({
          success: true,
          message: 'Telegram chat_id –æ–±–Ω–æ–≤–ª–µ–Ω'
        });
      } else {
        res.status(400).json({
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Telegram chat_id'
        });
      }
    } catch (error: any) {
      console.error('‚ùå Error updating user Telegram chat_id:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram chat_id',
        error: error.message
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É
   */
  static async getBotUsers(req: Request, res: Response) {
    try {
      const users = await UserNotificationService.getBotUsers();
      
      res.json({
        success: true,
        data: users
      });
    } catch (error: any) {
      console.error('‚ùå Error getting bot users:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞',
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
   */
  static async sendTestMessageToBotUsers(req: Request, res: Response) {
    try {
      const sentCount = await UserNotificationService.sendTestMessageToBotUsers();
      
      res.json({
        success: true,
        message: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞`,
        sentCount
      });
    } catch (error: any) {
      console.error('‚ùå Error sending test message to bot users:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
   */
  static async sendLowStockToBotUsers(req: Request, res: Response) {
    try {
      const { materialName, currentQuantity, minStock, supplierName } = req.body;
      
      const botUsers = await UserNotificationService.getBotUsers();
      let sentCount = 0;

      console.log(`üì§ Sending low stock notification to ${botUsers.length} bot users...`);

      for (const user of botUsers) {
        try {
          const message = `üö® *–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞*\n\n` +
                         `üì¶ *–ú–∞—Ç–µ—Ä–∏–∞–ª:* ${materialName}\n` +
                         `üìä *–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:* ${currentQuantity}\n` +
                         `‚ö†Ô∏è *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:* ${minStock}\n` +
                         (supplierName ? `üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* ${supplierName}\n` : '') +
                         `\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å`;
          
          const url = `https://api.telegram.org/bot7954389446:AAHmFQmGJOp-fZLhaZD9ZGxvrJ_WEyKMtnE/sendMessage`;
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              chat_id: user.chat_id,
              text: message,
              parse_mode: 'Markdown'
            })
          });

          const result = await response.json();
          
          if (result.ok) {
            sentCount++;
            console.log(`‚úÖ Low stock notification sent to ${user.first_name} (@${user.username || 'no_username'})`);
          } else {
            console.error(`‚ùå Failed to send to ${user.first_name}:`, result);
          }
        } catch (error) {
          console.error(`‚ùå Error sending to ${user.first_name}:`, error);
        }
      }

      res.json({
        success: true,
        message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}/${botUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞`,
        sentCount,
        totalUsers: botUsers.length
      });
    } catch (error: any) {
      console.error('‚ùå Error sending low stock to bot users:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö',
        error: error.message
      });
    }
  }
}

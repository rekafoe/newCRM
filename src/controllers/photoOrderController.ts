import { Request, Response } from 'express';
import { PhotoOrderService } from '../services/photoOrderService';
import { ImageProcessingService } from '../services/imageProcessingService';
import { TelegramService } from '../services/telegramService';
import multer from 'multer';
import * as path from 'path';
import * as fs from 'fs';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, '../uploads/photos');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const timestamp = Date.now();
    const ext = path.extname(file.originalname);
    cb(null, `photo_${timestamp}${ext}`);
  }
});

const upload = multer({
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB
    files: 10 // –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);

    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'));
    }
  }
});

export class PhotoOrderController {
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ
   */
  static async getAvailableSizes(req: Request, res: Response) {
    try {
      const sizes = ImageProcessingService.getAvailableSizes();
      const prices = PhotoOrderService.getAllPrices();

      const sizesWithPrices = sizes.map(size => ({
        ...size,
        price: prices[size.name] || 0,
        priceRub: ((prices[size.name] || 0) / 100).toFixed(0)
      }));

      res.json({
        success: true,
        data: sizesWithPrices
      });
    } catch (error) {
      console.error('‚ùå Error getting available sizes:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤'
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ñ–æ—Ç–æ
   */
  static async createOrder(req: Request, res: Response) {
    try {
      const { chatId, username, firstName, selectedSize, processingOptions, quantity, notes } = req.body;

      if (!chatId || !selectedSize || !processingOptions || !quantity) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const size = ImageProcessingService.getSizeByName(selectedSize.name);
      if (!size) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
      const files = req.files as Express.Multer.File[];
      if (!files || files.length === 0) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
        });
      }

      const originalPhotos = files.map(file => file.path);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const order = await PhotoOrderService.createOrder({
        chatId,
        username,
        firstName,
        originalPhotos,
        selectedSize: size,
        processingOptions,
        quantity: parseInt(quantity),
        notes
      });

      res.json({
        success: true,
        data: order
      });
    } catch (error) {
      console.error('‚ùå Error creating photo order:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserOrders(req: Request, res: Response) {
    try {
      const { chatId } = req.params;

      if (!chatId) {
        return res.status(400).json({
          success: false,
          message: 'Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω'
        });
      }

      const orders = await PhotoOrderService.getOrdersByChatId(chatId);

      res.json({
        success: true,
        data: orders
      });
    } catch (error) {
      console.error('‚ùå Error getting user orders:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
   */
  static async getOrderById(req: Request, res: Response) {
    try {
      const { orderId } = req.params;

      if (!orderId) {
        return res.status(400).json({
          success: false,
          message: 'ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
        });
      }

      const order = await PhotoOrderService.getOrderById(parseInt(orderId));

      if (!order) {
        return res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      res.json({
        success: true,
        data: order
      });
    } catch (error) {
      console.error('‚ùå Error getting order by ID:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  static async updateOrderStatus(req: Request, res: Response) {
    try {
      const { orderId } = req.params;
      const { status } = req.body;

      if (!orderId || !status) {
        return res.status(400).json({
          success: false,
          message: 'ID –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
        });
      }

      const validStatuses = ['pending', 'processing', 'ready_for_approval', 'approved', 'rejected', 'completed'];
      if (!validStatuses.includes(status)) {
        return res.status(400).json({
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
        });
      }

      const success = await PhotoOrderService.updateOrderStatus(parseInt(orderId), status);

      if (!success) {
        return res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞'
        });
      }

      res.json({
        success: true,
        message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });
    } catch (error) {
      console.error('‚ùå Error updating order status:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞'
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  static async sendProcessedPhotos(req: Request, res: Response) {
    try {
      const { orderId } = req.params;

      if (!orderId) {
        return res.status(400).json({
          success: false,
          message: 'ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
        });
      }

      const order = await PhotoOrderService.getOrderById(parseInt(orderId));

      if (!order) {
        return res.status(404).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      if (order.status !== 'ready_for_approval') {
        return res.status(400).json({
          success: false,
          message: '–ó–∞–∫–∞–∑ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let sentCount = 0;
      for (const processedPhoto of order.processedPhotos) {
        try {
          const success = await TelegramService.sendDocumentToUser(
            order.chatId,
            processedPhoto.processedPath,
            `üì∏ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ ${order.selectedSize.name}\n\n` +
            `üìè –†–∞–∑–º–µ—Ä: ${processedPhoto.metadata.processedWidth}x${processedPhoto.metadata.processedHeight}\n` +
            `üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(processedPhoto.metadata.fileSize / 1024).toFixed(2)}KB\n` +
            `üé® –†–µ–∂–∏–º: ${processedPhoto.options.cropMode === 'crop' ? '–ö—Ä–æ–ø' : '–í–ø–∏—Å–∞—Ç—å —Å –ø–æ–ª—è–º–∏'}`
          );
          
          if (success) {
            sentCount++;
          }
        } catch (error) {
          console.error(`‚ùå Error sending photo ${processedPhoto.processedPath}:`, error);
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
      const totalPriceRub = (order.totalPrice / 100).toFixed(0);
      const message = `üì∏ *–í–ê–® –ó–ê–ö–ê–ó –ì–û–¢–û–í –ö –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Æ*\n\n` +
                     `üÜî –ó–∞–∫–∞–∑ #${order.id}\n` +
                     `üìè –†–∞–∑–º–µ—Ä: ${order.selectedSize.name}\n` +
                     `üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${order.originalPhotos.length}\n` +
                     `üì¶ –ö–æ–ø–∏–π: ${order.quantity}\n` +
                     `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPriceRub} —Ä—É–±.\n` +
                     `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: ${sentCount}/${order.processedPhotos.length}\n\n` +
                     `‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #${order.id}"\n` +
                     `‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å #${order.id}"`;

      await TelegramService.sendToAllUsers([order.chatId], message);

      res.json({
        success: true,
        message: `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –∏–∑ ${order.processedPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`,
        data: { sentCount, totalCount: order.processedPhotos.length }
      });
    } catch (error) {
      console.error('‚ùå Error sending processed photos:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
      });
    }
  }

  /**
   * Middleware –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
   */
  static getUploadMiddleware() {
    return upload.array('photos', 10);
  }
}

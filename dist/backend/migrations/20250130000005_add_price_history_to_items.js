"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.up = up;
exports.down = down;
async function up(db) {
    console.log('üìä Adding price history fields to items table...');
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É items
        await db.exec(`
      ALTER TABLE items ADD COLUMN price_snapshot TEXT;
    `);
        await db.exec(`
      ALTER TABLE items ADD COLUMN material_prices_snapshot TEXT;
    `);
        await db.exec(`
      ALTER TABLE items ADD COLUMN base_price_snapshot TEXT;
    `);
        await db.exec(`
      ALTER TABLE items ADD COLUMN pricing_calculated_at TEXT DEFAULT (datetime('now'));
    `);
        console.log('‚úÖ Price history fields added to items table');
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
        await db.exec(`
      CREATE TABLE IF NOT EXISTS price_change_notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        material_id INTEGER,
        old_price REAL,
        new_price REAL,
        change_percent REAL,
        affected_orders_count INTEGER DEFAULT 0,
        notification_sent INTEGER DEFAULT 0,
        created_at TEXT DEFAULT (datetime('now')),
        FOREIGN KEY(material_id) REFERENCES materials(id)
      )
    `);
        console.log('‚úÖ Price change notifications table created');
    }
    catch (error) {
        if (error.message.includes('duplicate column name')) {
            console.log('‚ö†Ô∏è Price history fields already exist, skipping...');
        }
        else {
            throw error;
        }
    }
}
async function down(db) {
    console.log('üîÑ Removing price history fields from items table...');
    try {
        // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await db.exec('DROP TABLE IF EXISTS price_change_notifications');
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è –∏–∑ items (SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DROP COLUMN, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ–º)
        console.log('‚ö†Ô∏è SQLite does not support DROP COLUMN, fields will remain');
        console.log('‚úÖ Price history cleanup completed');
    }
    catch (error) {
        console.log('‚ö†Ô∏è Error during cleanup:', error);
        throw error;
    }
}

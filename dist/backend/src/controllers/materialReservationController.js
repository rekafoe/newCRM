"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaterialReservationController = void 0;
const materialReservationService_1 = require("../services/materialReservationService");
class MaterialReservationController {
    constructor(database) {
        this.reservationService = new materialReservationService_1.MaterialReservationService(database);
    }
    /**
     * –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
     */
    async createReservation(req, res) {
        try {
            const { material_id, order_id, quantity_reserved, expires_at, notes } = req.body;
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!material_id || !quantity_reserved) {
                res.status(400).json({
                    success: false,
                    message: 'material_id –∏ quantity_reserved –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
                });
                return;
            }
            if (quantity_reserved <= 0) {
                res.status(400).json({
                    success: false,
                    message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
                });
                return;
            }
            const reservation = await this.reservationService.createReservation({
                material_id,
                order_id,
                quantity_reserved,
                expires_at,
                reserved_by: req.user?.id,
                notes
            });
            console.log(`‚úÖ [MaterialReservationController] Created reservation ${reservation.id} for material ${material_id}`);
            res.status(201).json({
                success: true,
                data: reservation,
                message: '–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ'
            });
        }
        catch (error) {
            console.error('‚ùå [MaterialReservationController] createReservation error:', error);
            if (error.message.includes('Insufficient material')) {
                res.status(409).json({
                    success: false,
                    message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ',
                    details: error.message
                });
                return;
            }
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è',
                error: error.message
            });
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async getAllReservations(req, res) {
        try {
            const reservations = await this.reservationService.getAllReservations();
            res.json({
                success: true,
                data: reservations,
                count: reservations.length
            });
        }
        catch (error) {
            console.error('‚ùå [MaterialReservationController] getAllReservations error:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π',
                error: error.message
            });
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É
     */
    async getReservationsByMaterial(req, res) {
        try {
            const { materialId } = req.params;
            const material_id = parseInt(materialId);
            if (isNaN(material_id)) {
                res.status(400).json({
                    success: false,
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞'
                });
                return;
            }
            const reservations = await this.reservationService.getReservationsByMaterial(material_id);
            res.json({
                success: true,
                data: reservations,
                count: reservations.length
            });
        }
        catch (error) {
            console.error('‚ùå [MaterialReservationController] getReservationsByMaterial error:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
                error: error.message
            });
        }
    }
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    async updateReservation(req, res) {
        try {
            const { id } = req.params;
            const reservationId = parseInt(id);
            const updates = req.body;
            if (isNaN(reservationId)) {
                res.status(400).json({
                    success: false,
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è'
                });
                return;
            }
            const reservation = await this.reservationService.updateReservation(reservationId, updates, req.user?.id);
            console.log(`‚úÖ [MaterialReservationController] Updated reservation ${reservationId}`);
            res.json({
                success: true,
                data: reservation,
                message: '–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
            });
        }
        catch (error) {
            console.error('‚ùå [MaterialReservationController] updateReservation error:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è',
                error: error.message
            });
        }
    }
    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    async cancelReservation(req, res) {
        try {
            const { id } = req.params;
            const reservationId = parseInt(id);
            const { reason } = req.body;
            if (isNaN(reservationId)) {
                res.status(400).json({
                    success: false,
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è'
                });
                return;
            }
            await this.reservationService.cancelReservation(reservationId, reason, req.user?.id);
            console.log(`‚úÖ [MaterialReservationController] Cancelled reservation ${reservationId}`);
            res.json({
                success: true,
                message: '–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
            });
        }
        catch (error) {
            console.error('‚ùå [MaterialReservationController] cancelReservation error:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è',
                error: error.message
            });
        }
    }
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–ø–∏—Å–∞—Ç—å —Å–æ —Å–∫–ª–∞–¥–∞)
     */
    async fulfillReservation(req, res) {
        try {
            const { id } = req.params;
            const reservationId = parseInt(id);
            if (isNaN(reservationId)) {
                res.status(400).json({
                    success: false,
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è'
                });
                return;
            }
            await this.reservationService.fulfillReservation(reservationId, req.user?.id);
            console.log(`‚úÖ [MaterialReservationController] Fulfilled reservation ${reservationId}`);
            res.json({
                success: true,
                message: '–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
            });
        }
        catch (error) {
            console.error('‚ùå [MaterialReservationController] fulfillReservation error:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è',
                error: error.message
            });
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
     */
    async getAvailableQuantity(req, res) {
        try {
            const { materialId } = req.params;
            const material_id = parseInt(materialId);
            if (isNaN(material_id)) {
                res.status(400).json({
                    success: false,
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞'
                });
                return;
            }
            const availableQuantity = await this.reservationService.getAvailableQuantity(material_id);
            res.json({
                success: true,
                data: {
                    material_id,
                    available_quantity: availableQuantity
                }
            });
        }
        catch (error) {
            console.error('‚ùå [MaterialReservationController] getAvailableQuantity error:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞',
                error: error.message
            });
        }
    }
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async cleanupExpiredReservations(req, res) {
        try {
            const expiredCount = await this.reservationService.cleanupExpiredReservations();
            console.log(`üßπ [MaterialReservationController] Cleaned up ${expiredCount} expired reservations`);
            res.json({
                success: true,
                data: {
                    expired_count: expiredCount
                },
                message: `–û—á–∏—â–µ–Ω–æ ${expiredCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π`
            });
        }
        catch (error) {
            console.error('‚ùå [MaterialReservationController] cleanupExpiredReservations error:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π',
                error: error.message
            });
        }
    }
}
exports.MaterialReservationController = MaterialReservationController;

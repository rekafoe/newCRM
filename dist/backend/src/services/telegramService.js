"use strict";
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch (Node.js 18+)
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramService = void 0;
class TelegramService {
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
     */
    static initialize(config) {
        this.config = config;
        console.log('ü§ñ Telegram service initialized:', {
            enabled: config.enabled,
            chatId: config.chatId ? `${config.chatId.substring(0, 4)}...` : 'not set'
        });
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
     */
    static isEnabled() {
        return this.config?.enabled && !!this.config?.botToken && !!this.config?.chatId;
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
     */
    static async sendLowStockNotification(notification) {
        if (!this.isEnabled()) {
            console.log('‚ö†Ô∏è Telegram notifications disabled');
            return false;
        }
        const message = this.formatLowStockMessage(notification);
        return this.sendMessage(message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
     */
    static async sendOrderNotification(notification) {
        if (!this.isEnabled()) {
            console.log('‚ö†Ô∏è Telegram notifications disabled');
            return false;
        }
        const message = this.formatOrderMessage(notification);
        return this.sendMessage(message);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    static async sendNotification(title, message, priority = 'medium') {
        if (!this.isEnabled()) {
            console.log('‚ö†Ô∏è Telegram notifications disabled');
            return false;
        }
        const emoji = priority === 'high' ? 'üö®' : priority === 'medium' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
        const formattedMessage = `${emoji} *${title}*\n\n${message}`;
        return this.sendMessage(formattedMessage);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     */
    static async sendMessage(message) {
        if (!this.config) {
            console.error('‚ùå Telegram config not initialized');
            return false;
        }
        try {
            const url = `https://api.telegram.org/bot${this.config.botToken}/sendMessage`;
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: this.config.chatId,
                    text: message,
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true
                })
            });
            const data = await response.json();
            if (data.ok) {
                console.log('‚úÖ Telegram message sent successfully');
                return true;
            }
            else {
                console.error('‚ùå Telegram API error:', data);
                return false;
            }
        }
        catch (error) {
            console.error('‚ùå Failed to send Telegram message:', error.message);
            return false;
        }
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
     */
    static formatLowStockMessage(notification) {
        const { materialName, currentQuantity, minStockLevel, supplierName, supplierContact, categoryName } = notification;
        let message = `üö® *–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞*\n\n`;
        message += `üì¶ *–ú–∞—Ç–µ—Ä–∏–∞–ª:* ${materialName}\n`;
        message += `üìä *–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:* ${currentQuantity}\n`;
        message += `‚ö†Ô∏è *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:* ${minStockLevel}\n`;
        if (categoryName) {
            message += `üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${categoryName}\n`;
        }
        if (supplierName) {
            message += `üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* ${supplierName}\n`;
        }
        if (supplierContact) {
            message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${supplierContact}\n`;
        }
        message += `\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å`;
        return message;
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
     */
    static formatOrderMessage(notification) {
        const { orderId, supplierName, supplierContact, materials, totalAmount, deliveryDate } = notification;
        let message = `üìã *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É*\n\n`;
        message += `üÜî *–ó–∞–∫–∞–∑ ‚Ññ:* ${orderId}\n`;
        message += `üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* ${supplierName}\n`;
        if (supplierContact) {
            message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${supplierContact}\n`;
        }
        if (deliveryDate) {
            message += `üìÖ *–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏:* ${deliveryDate}\n`;
        }
        message += `\nüì¶ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*\n`;
        materials.forEach((material, index) => {
            message += `${index + 1}. ${material.name} - ${material.quantity} ${material.unit} (${material.price} BYN)\n`;
        });
        message += `\nüí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* ${totalAmount.toFixed(2)} BYN`;
        return message;
    }
    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    static async sendTestMessage() {
        const testMessage = `üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`;
        return this.sendMessage(testMessage);
    }
}
exports.TelegramService = TelegramService;
TelegramService.config = null;

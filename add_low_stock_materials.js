const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'data.db');
const db = new sqlite3.Database(dbPath);

async function addLowStockMaterials() {
  return new Promise((resolve, reject) => {
    console.log('üîß Adding materials with low stock for demonstration...');
    
    const lowStockMaterials = [
      {
        name: '–ë—É–º–∞–≥–∞ –ê4 80–≥/–º¬≤ (–æ—Ñ–∏—Å–Ω–∞—è)',
        unit: '–ø–∞—á–∫–∞',
        quantity: 5,
        min_quantity: 50,
        price: 2.5,
        description: '–û—Ñ–∏—Å–Ω–∞—è –±—É–º–∞–≥–∞ –±–µ–ª–∞—è, —Ñ–æ—Ä–º–∞—Ç –ê4, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 80–≥/–º¬≤, 500 –ª–∏—Å—Ç–æ–≤ –≤ –ø–∞—á–∫–µ',
        supplier_id: 1,
        category_id: 1
      },
      {
        name: '–¢–æ–Ω–µ—Ä HP CF410A (—á–µ—Ä–Ω—ã–π)',
        unit: '–∫–∞—Ä—Ç—Ä–∏–¥–∂',
        quantity: 2,
        min_quantity: 10,
        price: 45.0,
        description: '–¢–æ–Ω–µ—Ä-–∫–∞—Ä—Ç—Ä–∏–¥–∂ HP CF410A –¥–ª—è –ª–∞–∑–µ—Ä–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤, —á–µ—Ä–Ω—ã–π, —Ä–µ—Å—É—Ä—Å 1200 —Å—Ç—Ä–∞–Ω–∏—Ü',
        supplier_id: 2,
        category_id: 2
      },
      {
        name: '–ö—Ä–∞—Å–∫–∞ Epson 664 (—á–µ—Ä–Ω–∞—è)',
        unit: '–∫–∞—Ä—Ç—Ä–∏–¥–∂',
        quantity: 1,
        min_quantity: 5,
        price: 25.0,
        description: '–ö–∞—Ä—Ç—Ä–∏–¥–∂ —Å —á–µ—Ä–Ω–∏–ª–∞–º–∏ Epson 664 –¥–ª—è —Å—Ç—Ä—É–π–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤, —á–µ—Ä–Ω—ã–π',
        supplier_id: 2,
        category_id: 2
      },
      {
        name: '–ü–ª–µ–Ω–∫–∞ –¥–ª—è –ª–∞–º–∏–Ω–∞—Ü–∏–∏ 125–º–∫–º',
        unit: '—Ä—É–ª–æ–Ω',
        quantity: 3,
        min_quantity: 15,
        price: 12.0,
        description: '–ü–ª–µ–Ω–∫–∞ –¥–ª—è –ª–∞–º–∏–Ω–∞—Ü–∏–∏ —Ç–æ–ª—â–∏–Ω–æ–π 125–º–∫–º, —à–∏—Ä–∏–Ω–∞ 33—Å–º, –¥–ª–∏–Ω–∞ 30–º',
        supplier_id: 1,
        category_id: 3
      },
      {
        name: '–°–∫–æ–±—ã –¥–ª—è —Å—Ç–µ–ø–ª–µ—Ä–∞ ‚Ññ10 (1000—à—Ç)',
        unit: '–∫–æ—Ä–æ–±–∫–∞',
        quantity: 8,
        min_quantity: 20,
        price: 3.5,
        description: '–°–∫–æ–±—ã –¥–ª—è —Å—Ç–µ–ø–ª–µ—Ä–∞ ‚Ññ10, 1000 —à—Ç—É–∫ –≤ –∫–æ—Ä–æ–±–∫–µ',
        supplier_id: 3,
        category_id: 4
      }
    ];
    
    let completed = 0;
    
    lowStockMaterials.forEach(material => {
      db.run(`
        INSERT INTO materials (
          name, unit, quantity, min_quantity, sheet_price_single,
          description, supplier_id, category_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        material.name,
        material.unit,
        material.quantity,
        material.min_quantity,
        material.price,
        material.description,
        material.supplier_id,
        material.category_id
      ], function(err) {
        if (err) {
          console.error(`‚ùå Error adding material "${material.name}":`, err);
          reject(err);
          return;
        }
        
        console.log(`‚úÖ Added material ${this.lastID}: "${material.name}" (${material.quantity} ${material.unit}, min: ${material.min_quantity})`);
        completed++;
        
        if (completed === lowStockMaterials.length) {
          resolve();
        }
      });
    });
  });
}

async function checkLowStockMaterials() {
  return new Promise((resolve, reject) => {
    console.log('\nüîç Checking materials with low stock...');
    
    db.all(`
      SELECT 
        m.id, m.name, m.unit, m.quantity, m.min_quantity,
        m.description, m.sheet_price_single,
        s.name as supplier_name, c.name as category_name
      FROM materials m
      LEFT JOIN suppliers s ON s.id = m.supplier_id
      LEFT JOIN material_categories c ON c.id = m.category_id
      WHERE m.quantity > 0 AND m.quantity <= COALESCE(m.min_quantity, 10)
      ORDER BY m.quantity ASC
    `, (err, materials) => {
      if (err) {
        reject(err);
        return;
      }
      
      if (materials.length === 0) {
        console.log('  ‚úÖ No materials with low stock found');
      } else {
        console.log(`  ‚ö†Ô∏è  Found ${materials.length} materials with low stock:`);
        materials.forEach(material => {
          const percentage = Math.round((material.quantity / material.min_quantity) * 100);
          console.log(`     ‚Ä¢ "${material.name}" (${material.quantity} ${material.unit}, min: ${material.min_quantity}) - ${percentage}% - ${material.supplier_name || 'No supplier'}`);
        });
      }
      
      resolve();
    });
  });
}

async function main() {
  try {
    await addLowStockMaterials();
    await checkLowStockMaterials();
    console.log('\nüéâ Low stock materials added successfully!');
  } catch (error) {
    console.error('‚ùå Failed to add materials:', error);
  } finally {
    db.close();
  }
}

main();
